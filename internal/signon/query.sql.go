// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package signon

import (
	"context"
	"database/sql"
)

const createSignOn = `-- name: CreateSignOn :exec
INSERT INTO signons (
    id_pc, company, firstname, lastname, zip, city, street, house_no, pc_state, desired_delivery_start, meter_no, malo, melo, config_id, created_at
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateSignOnParams struct {
	IDPc                 int64
	Company              sql.NullString
	Firstname            sql.NullString
	Lastname             sql.NullString
	Zip                  sql.NullString
	City                 sql.NullString
	Street               sql.NullString
	HouseNo              sql.NullString
	PcState              sql.NullString
	DesiredDeliveryStart sql.NullString
	MeterNo              sql.NullString
	Malo                 sql.NullString
	Melo                 sql.NullString
	ConfigID             sql.NullString
	CreatedAt            string
}

func (q *Queries) CreateSignOn(ctx context.Context, arg CreateSignOnParams) error {
	_, err := q.db.ExecContext(ctx, createSignOn,
		arg.IDPc,
		arg.Company,
		arg.Firstname,
		arg.Lastname,
		arg.Zip,
		arg.City,
		arg.Street,
		arg.HouseNo,
		arg.PcState,
		arg.DesiredDeliveryStart,
		arg.MeterNo,
		arg.Malo,
		arg.Melo,
		arg.ConfigID,
		arg.CreatedAt,
	)
	return err
}

const fillupContext = `-- name: FillupContext :exec
INSERT INTO signon_context(signon_id_pc, state)
select id_pc, "processing" from signons
where (
    select signon_id_pc from signon_context where signon_id_pc = id_pc
) is null
`

func (q *Queries) FillupContext(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, fillupContext)
	return err
}

const getSignOn = `-- name: GetSignOn :one
SELECT signons.id, signons.id_pc, signons.created_at, signons.energy_type, signons.company, signons.firstname, signons.lastname, signons.zip, signons.city, signons.street, signons.house_no, signons.pc_state, signons.desired_delivery_start, signons.meter_no, signons.malo, signons.melo, signons.config_id, signon_context.signon_id_pc, signon_context.state, signon_context.comment FROM signons
LEFT JOIN signon_context ON signons.id_pc = signon_context.signon_id_pc
WHERE id = ? LIMIT 1
`

type GetSignOnRow struct {
	Signon        Signon
	SignonContext SignonContext
}

func (q *Queries) GetSignOn(ctx context.Context, id int64) (GetSignOnRow, error) {
	row := q.db.QueryRowContext(ctx, getSignOn, id)
	var i GetSignOnRow
	err := row.Scan(
		&i.Signon.ID,
		&i.Signon.IDPc,
		&i.Signon.CreatedAt,
		&i.Signon.EnergyType,
		&i.Signon.Company,
		&i.Signon.Firstname,
		&i.Signon.Lastname,
		&i.Signon.Zip,
		&i.Signon.City,
		&i.Signon.Street,
		&i.Signon.HouseNo,
		&i.Signon.PcState,
		&i.Signon.DesiredDeliveryStart,
		&i.Signon.MeterNo,
		&i.Signon.Malo,
		&i.Signon.Melo,
		&i.Signon.ConfigID,
		&i.SignonContext.SignonIDPc,
		&i.SignonContext.State,
		&i.SignonContext.Comment,
	)
	return i, err
}

const listSignOns = `-- name: ListSignOns :many
SELECT signons.id, signons.id_pc, signons.created_at, signons.energy_type, signons.company, signons.firstname, signons.lastname, signons.zip, signons.city, signons.street, signons.house_no, signons.pc_state, signons.desired_delivery_start, signons.meter_no, signons.malo, signons.melo, signons.config_id FROM signons
LEFT JOIN signon_context ON signons.id_pc = signon_context.signon_id_pc
`

func (q *Queries) ListSignOns(ctx context.Context) ([]Signon, error) {
	rows, err := q.db.QueryContext(ctx, listSignOns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Signon
	for rows.Next() {
		var i Signon
		if err := rows.Scan(
			&i.ID,
			&i.IDPc,
			&i.CreatedAt,
			&i.EnergyType,
			&i.Company,
			&i.Firstname,
			&i.Lastname,
			&i.Zip,
			&i.City,
			&i.Street,
			&i.HouseNo,
			&i.PcState,
			&i.DesiredDeliveryStart,
			&i.MeterNo,
			&i.Malo,
			&i.Melo,
			&i.ConfigID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSignOnsByState = `-- name: ListSignOnsByState :many
SELECT signons.id, signons.id_pc, signons.created_at, signons.energy_type, signons.company, signons.firstname, signons.lastname, signons.zip, signons.city, signons.street, signons.house_no, signons.pc_state, signons.desired_delivery_start, signons.meter_no, signons.malo, signons.melo, signons.config_id FROM signons
LEFT JOIN signon_context ON signons.id_pc = signon_context.signon_id_pc
WHERE signon_context.state = ?
`

func (q *Queries) ListSignOnsByState(ctx context.Context, state string) ([]Signon, error) {
	rows, err := q.db.QueryContext(ctx, listSignOnsByState, state)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Signon
	for rows.Next() {
		var i Signon
		if err := rows.Scan(
			&i.ID,
			&i.IDPc,
			&i.CreatedAt,
			&i.EnergyType,
			&i.Company,
			&i.Firstname,
			&i.Lastname,
			&i.Zip,
			&i.City,
			&i.Street,
			&i.HouseNo,
			&i.PcState,
			&i.DesiredDeliveryStart,
			&i.MeterNo,
			&i.Malo,
			&i.Melo,
			&i.ConfigID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContext = `-- name: UpdateContext :exec
UPDATE signon_context SET state = ?, comment = ? WHERE signon_id_pc = ?
`

type UpdateContextParams struct {
	State      string
	Comment    string
	SignonIDPc int64
}

func (q *Queries) UpdateContext(ctx context.Context, arg UpdateContextParams) error {
	_, err := q.db.ExecContext(ctx, updateContext, arg.State, arg.Comment, arg.SignonIDPc)
	return err
}
